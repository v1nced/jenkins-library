// ===== vars/npmTest.groovy =====
def call(Map config) {
    echo "üß™ –ó–∞–ø—É—Å–∫ npm —Ç–µ—Å—Ç–æ–≤"
    
    try {
        dir(config.projectPath) {
            // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            if (!env.SKIP_CACHE?.toBoolean()) {
                sh "npm ci"
            }
            
            // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
            sh "npm run ${config.testCommand}"
            
            // –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã –æ—Ç—á–µ—Ç–æ–≤
            if (fileExists('test-results.xml')) {
                publishTestResults([
                    testResultsPattern: 'test-results.xml',
                    allowEmptyResults: false
                ])
            }
            
            // –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞
            if (fileExists('coverage/lcov.info')) {
                publishCoverage([
                    adapters: [
                        coberturaAdapter('coverage/cobertura-coverage.xml')
                    ],
                    sourceFileResolver: sourceFiles('STORE_LAST_BUILD')
                ])
            }
        }
        
        echo "‚úÖ npm —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
        
    } catch (Exception e) {
        echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ npm —Ç–µ—Å—Ç–æ–≤: ${e.getMessage()}"
        currentBuild.result = 'FAILURE'
        throw e
    }
}