// ===== vars/sendTelegramNotification.groovy =====
def call(Map config) {
    echo "üì± –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"
    
    try {
        def testSummary = [:]
        
        // –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
        if (fileExists("${env.ARTIFACTS_PATH}/test-summary.json")) {
            testSummary = readJSON file: "${env.ARTIFACTS_PATH}/test-summary.json"
        }
        
        def status = config.buildStatus ?: 'UNKNOWN'
        def statusEmoji = getStatusEmoji(status)
        def statusColor = getStatusColor(status)
        
        def message = """
üöÄ *–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ*

üì¶ *–ü—Ä–æ–µ–∫—Ç:* ${config.projectName}
üåø *–í–µ—Ç–∫–∞:* ${config.branch}
üë§ *–ó–∞–ø—É—Å—Ç–∏–ª:* ${config.buildUser}
üèóÔ∏è *–°–±–æ—Ä–∫–∞:* #${env.BUILD_NUMBER}
${statusEmoji} *–°—Ç–∞—Ç—É—Å:* ${status}

${testSummary.results ? """
üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:*
‚Ä¢ –í—Å–µ–≥–æ: ${testSummary.results.totalTests}
‚Ä¢ –ü—Ä–æ—à–ª–æ: ‚úÖ ${testSummary.results.passedTests}
‚Ä¢ –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ‚ùå ${testSummary.results.failedTests}
‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ: ‚è≠Ô∏è ${testSummary.results.skippedTests}
‚Ä¢ –í—Ä–µ–º—è: ‚è±Ô∏è ${testSummary.results.testDuration}
""" : ""}

üîó [–î–µ—Ç–∞–ª–∏ —Å–±–æ—Ä–∫–∏](${config.buildUrl})
""".trim()

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ HTTP API Telegram
        def telegramToken = env.TELEGRAM_BOT_TOKEN
        def chatId = config.chatId
        
        if (telegramToken && chatId) {
            def payload = [
                chat_id: chatId,
                text: message,
                parse_mode: "Markdown",
                disable_web_page_preview: true
            ]
            
            httpRequest(
                httpMode: 'POST',
                url: "https://api.telegram.org/bot${telegramToken}/sendMessage",
                contentType: 'APPLICATION_JSON',
                requestBody: groovy.json.JsonOutput.toJson(payload),
                validResponseCodes: '200'
            )
            
            echo "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram"
        } else {
            echo "‚ö†Ô∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Telegram (TELEGRAM_BOT_TOKEN –∏–ª–∏ chatId)"
        }
        
    } catch (Exception e) {
        echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${e.getMessage()}"
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def getStatusEmoji(status) {
    switch(status) {
        case 'SUCCESS': return '‚úÖ'
        case 'FAILURE': return '‚ùå'
        case 'UNSTABLE': return '‚ö†Ô∏è'
        case 'ABORTED': return 'üõë'
        default: return '‚ùì'
    }
}

def getStatusColor(status) {
    switch(status) {
        case 'SUCCESS': return 'good'
        case 'FAILURE': return 'danger'
        case 'UNSTABLE': return 'warning'
        default: return '#439FE0'
    }
}

def getBranchList(repoUrl) {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–µ—Ç–æ–∫ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    return ['main', 'develop', 'staging', 'feature/*']
}