def call(Map config) {
    echo "üß™ –ó–∞–ø—É—Å–∫ .NET —Ç–µ—Å—Ç–æ–≤"
    
    try {
        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤
        if (!env.SKIP_CACHE?.toBoolean()) {
            sh "dotnet restore ${config.projectPath}"
        }
        
        // –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
        sh "dotnet build ${config.projectPath} --configuration ${config.configuration} --no-restore"
        
        // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ—Ç—á–µ—Ç–æ–≤
        sh """
            dotnet test ${config.projectPath} \
                --configuration ${config.configuration} \
                --no-build \
                --logger "trx;LogFileName=test-results.trx" \
                --logger "html;LogFileName=test-results.html" \
                --results-directory ${env.TEST_RESULTS_PATH} \
                --collect:"XPlat Code Coverage"
        """
        
        // –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
        publishTestResults([
            testResultsPattern: "${env.TEST_RESULTS_PATH}/**/*.trx",
            allowEmptyResults: false
        ])
        
        // –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞
        publishCoverage([
            adapters: [
                istanbulCoberturaAdapter("${env.TEST_RESULTS_PATH}/**/coverage.cobertura.xml")
            ],
            sourceFileResolver: sourceFiles('STORE_LAST_BUILD')
        ])
        
        echo "‚úÖ .NET —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
        
    } catch (Exception e) {
        echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ .NET —Ç–µ—Å—Ç–æ–≤: ${e.getMessage()}"
        currentBuild.result = 'FAILURE'
        throw e
    }
}