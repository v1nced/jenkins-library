// src/com/company/jenkins/TestRunner.groovy
package com.company.jenkins

class TestRunner implements Serializable {
    
    def script
    
    TestRunner(script) {
        this.script = script
    }
    
    def runTests(Map config) {
        script.echo "üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è ${config.projectType} –ø—Ä–æ–µ–∫—Ç–∞"
        
        switch(config.projectType) {
            case 'dotnet':
                return runDotNetTests(config)
            case 'npm':
                return runNpmTests(config)
            default:
                throw new UnsupportedOperationException("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞: ${config.projectType}")
        }
    }
    
    private def runDotNetTests(Map config) {
        def commands = [
            "dotnet restore ${config.projectPath}",
            "dotnet build ${config.projectPath} --configuration ${config.configuration} --no-restore",
            "dotnet test ${config.projectPath} --configuration ${config.configuration} --no-build --logger trx --results-directory test-results"
        ]
        
        commands.each { command ->
            script.sh command
        }
        
        return collectDotNetResults()
    }
    
    private def runNpmTests(Map config) {
        script.dir(config.projectPath) {
            script.sh "npm ci"
            script.sh "npm run ${config.testCommand}"
        }
        
        return collectNpmResults()
    }
    
    private def collectDotNetResults() {
        // –õ–æ–≥–∏–∫–∞ —Å–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ .NET —Ç–µ—Å—Ç–æ–≤
        return [
            testFramework: 'MSTest/NUnit/xUnit',
            resultsPath: 'test-results'
        ]
    }
    
    private def collectNpmResults() {
        // –õ–æ–≥–∏–∫–∞ —Å–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ npm —Ç–µ—Å—Ç–æ–≤
        return [
            testFramework: 'Jest/Mocha/Cypress',
            resultsPath: 'test-results'
        ]
    }
}